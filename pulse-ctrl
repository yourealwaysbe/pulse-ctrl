#!/usr/bin/python

import subprocess, re, sys

Pactl = "pactl"
PactlList = "list"

Pacmd = "pacmd"
PacmdDump = "dump"
PacmdSetSinkMute = "set-sink-mute"
PacmdSetSinkInputMute = "set-sink-input-mute"
PacmdMuted = "yes"
PacmdMoveSinkInput = "move-sink-input"
PacmdSetSinkVolume = "set-sink-volume"
PacmdSetSinkInputVolume = "set-sink-input-volume"

ItemsAll = "all"
SinkDefaultName = "default"

# According to pacmd anyhow, not sure if this is universal to all sinks
VolNormal = 0x10000

Null = 0

########################################################

class Sink:
    def __init__(self, idnum, name, muted, volume):
        self.idnum = idnum
        self.name = name
        self.muted = muted
        self.volume = volume

class SinkInput:
    def __init__(self, idnum, appName, muted, volume, sink):
        self.idnum = idnum
        self.appName = appName 
        self.muted = muted
        self.volume = volume
        self.sink = sink

####################################################

class PulseInfo:
    PulseBufSize = 1000

    SinkRE = re.compile("Sink #([0-9]*)")
    SinkIdGroup = 1
    SinkNameRE = re.compile("\s*Name: (.*)")
    SinkNameGroup = 1
    SinkMutedRE = re.compile("\s*Mute: (.*)")
    SinkMutedGroup = 1
    SinkVolumePCRE = re.compile("\s*Volume:.* ([0-9]*)%.*")
    SinkVolumePCGroup = 1

    SinkInputRE = re.compile("Sink Input #([0-9]*)")
    SinkInputIdGroup = 1
    SinkInputAppNameRE = re.compile("\s*application.name = \"(.*)\"")
    SinkInputAppNameGroup = 1
    SinkInputMutedRE = SinkMutedRE
    SinkInputMutedGroup = SinkMutedGroup
    SinkInputVolumePCRE = SinkVolumePCRE
    SinkInputVolumePCGroup = SinkVolumePCGroup
    SinkInputSinkRE = re.compile("\s*Sink: ([0-9]*)")
    SinkInputSinkGroup = 1
    DefaultSinkRE = re.compile("set-default-sink (.*)")
    DefaultSinkGroup = 1

    def __init__(self):
       self.sinks = []
       self.sinkInputs = []
       self.defaultSink = Null
       self.getPulseInfo()

    def getPulseInfo(self):
        self.processSinksAndInputs()
        self.processDefaultSink()

    def processSinksAndInputs(self):
        self.sinks = []
        self.sinkInputs = []
        rawData = subprocess.Popen([Pactl, PactlList], 
                                   bufsize=self.PulseBufSize, 
                                   stdout=subprocess.PIPE).stdout
        try:
            while 1:
                line = rawData.next()
                m = self.SinkRE.match(line)
                if m:
                    self.processSink(m.group(self.SinkIdGroup), rawData)
                else:
                    m = self.SinkInputRE.match(line)
                    if m:
                        self.processSinkInput(m.group(self.SinkInputIdGroup), rawData)
        except StopIteration:
            # done
            pass

    def condMatchReg(self, saveString, matchLine, re, group):
        if saveString == "":
            m = re.match(matchLine)
            if m:
                saveString = m.group(group)

        return saveString
            

    def processSink(self, idnum, rawData):
        name = ""
        muted = ""
        volume = ""
        while ((name == "") or 
               (muted == "") or
               (volume == "")): 
            line = rawData.next()
            name = self.condMatchReg(name, 
                                     line, 
                                     self.SinkNameRE, 
                                     self.SinkNameGroup)
            muted = self.condMatchReg(muted, 
                                      line, 
                                      self.SinkMutedRE, 
                                      self.SinkMutedGroup)
            volume = self.condMatchReg(volume, 
                                       line, 
                                       self.SinkVolumePCRE, 
                                       self.SinkVolumePCGroup)
        self.sinks.append(Sink(idnum, 
                               name, 
                               muted == PacmdMuted,
                               volume))


    def processSinkInput(self, idnum, rawData):
        appName = ""
        muted = ""
        volume = ""
        sink = ""
        while ((appName == "") or
               (muted == "") or
               (volume == "") or
               (sink == "")):
            line = rawData.next()
            appName = self.condMatchReg(appName, 
                                        line, 
                                        self.SinkInputAppNameRE, 
                                        self.SinkInputAppNameGroup)
            muted = self.condMatchReg(muted, 
                                      line, 
                                      self.SinkInputMutedRE, 
                                      self.SinkInputMutedGroup)
            volume = self.condMatchReg(volume, 
                                       line, 
                                       self.SinkInputVolumePCRE, 
                                       self.SinkInputVolumePCGroup)
            sink = self.condMatchReg(sink,  
                                     line, 
                                     self.SinkInputSinkRE, 
                                     self.SinkInputSinkGroup)
        self.sinkInputs.append(SinkInput(idnum, 
                                         appName, 
                                         muted == PacmdMuted, 
                                         volume,
                                         sink))

    def processDefaultSink(self):
        # assumes we've run processSinksAndInputs, but if we don't have
        # any sinks, make another attempt
        if self.sinks == []:
            self.processSinksAndInputs()

        rawData = subprocess.Popen([Pacmd, PacmdDump], 
                                   bufsize=self.PulseBufSize, 
                                   stdout=subprocess.PIPE).stdout
        try:
            while 1:
                line = rawData.next()
                if self.defaultSink == Null:
                    m = self.DefaultSinkRE.match(line)
                    if m:
                        sinkName = m.group(self.DefaultSinkGroup)
                        self.defaultSink = self.getSinkByName(sinkName)
        except StopIteration:
            # done
            pass


    def getSink(self, identifier):
        sink = self.getSinkByName(identifier)
        if (sink == Null):
            sink = self.getSinkByIdnum(identifier)
        return sink

    def getSinkByName(self, name):
        resSink = Null
        if name == SinkDefaultName:
            resSink = self.defaultSink
        else:
            for sink in self.sinks:
                if sink.name == name:
                    resSink = sink
                    break
        return resSink

    def getSinkByIdnum(self, idnum):
        resSink = Null
        for sink in self.sinks:
            if sink.idnum == idnum:
                resSink = sink
                break
        return resSink

    def getSinkInput(self, identifier):
        sinkInput = self.getSinkInputByAppName(identifier)
        if (sinkInput == Null):
            sinkInput = self.getSinkInputByIdnum(identifier)
        return sinkInput
                
    def getSinkInputByAppName(self, appName):
        resSinkInput = Null
        for sinkInput in self.sinkInputs:
            if sinkInput.appName == appName:
                resSinkInput = sinkInput
                break
        return resSinkInput

    def getSinkInputByIdnum(self, idnum):
        resSinkInput = Null
        for sinkInput in self.sinkInputs:
            if sinkInput.idnum == idnum:
                resSinkInput = sinkInput
                break
        return resSinkInput

    def getSinkInputs(self):
        return self.sinkInputs

    def getSinks(self):
        return self.sinks

    def getDefaultSink(self):
        return self.defaultSink


########################################################

class Actioneer:
    Command = "specify a command name"
    Options = "specify the options"
    Does = "specify what the action does"

    def __init__(self, pulseInfo, argv):
        self.pulseInfo = pulseInfo
        self.argv = argv

    def go(self):
        print "specify how to do the action"

    def printSinkInputs(self):
        for sinkInput in self.pulseInfo.getSinkInputs():
            sys.stdout.write(sinkInput.idnum)
            sys.stdout.write(") ")
            sys.stdout.write(sinkInput.appName)
            sys.stdout.write("\n")
            sys.stdout.write(" (Volume: ")
            sys.stdout.write(sinkInput.volume)
            sys.stdout.write("%")
            if sinkInput.muted:
                sys.stdout.write(" [mute]")
            sys.stdout.write(", Sink: ")
            sys.stdout.write(sinkInput.sink)
            sys.stdout.write(")\n")

    def printSinks(self):
        defaultSinkName = ""
        defaultSink = self.pulseInfo.getDefaultSink()
        if not (defaultSink == Null):
            defaultSinkName = defaultSink.name

        for sink in self.pulseInfo.getSinks():
            sys.stdout.write(sink.idnum)
            sys.stdout.write(") ")
            sys.stdout.write(sink.name)
            sys.stdout.write(" (Volume: ")
            sys.stdout.write(sink.volume)
            sys.stdout.write("%")
            if sink.muted:
                sys.stdout.write(" [mute]")
            if sink.name == defaultSinkName:
                sys.stdout.write(", Default")
            sys.stdout.write(")\n")

    def askSink(self):
        sink = Null
        sinks = self.pulseInfo.getSinks()
        if (sinks == []):
            print "No sinks available."
        else:
            self.printSinks()
            sinkId = raw_input("Sink Id: ")
            sink = pulseInfo.getSinkByIdnum(sinkId)
            if (sink == Null):
                print "Warning: no sink with that id exists."
        return sink

    def askSinkInput(self):
        sinkInput = Null
        sinkInputs = self.pulseInfo.getSinkInputs()
        if (sinkInputs == []):
            print "No sinks inputs available."
        else:
            self.printSinkInputs()
            sinkInputId = raw_input("Sink Input Id: ")
            sinkInput = pulseInfo.getSinkInputByIdnum(sinkInputId)
            if (sinkInput == Null):
                print "Warning: no sink input with that id exists."
        return sinkInput




########################################################

class SinkChanger(Actioneer):
    Command = "change-sink"
    Options = "sink_input sink_name1 sink_name2 ..."
    Does = "Changes sink_input (generally an app name, e.g. mpd) to an output.  Tries sink_names in order until one is found."
    SinkInputIndex = 2
    SinkStartIndex = 3

    def go(self):
        if len(self.argv) < self.SinkStartIndex:
            self.doMenu()
        else:
            self.doCommandLine()

    def doMenu(self):
        sink = self.askSink()
        sinkInput = self.askSinkInput()
        self.doChange(sinkInput, sink)

    def doCommandLine(self):
        sinkInput = self.getSinkInput()
        sink = self.getSink()
        self.doChange(sinkInput, sink)

    def getSinkInput(self):
        sinkInputName = self.argv[self.SinkInputIndex]
        return self.pulseInfo.getSinkInput(sinkInputName)

    def getSink(self):
        argIndex = self.SinkStartIndex
        sink = Null
        while (argIndex < len(self.argv)) and (sink == Null):
            sinkName = self.argv[argIndex]
            if sinkName == SinkDefaultName:
                sink = self.pulseInfo.getDefaultSink()
            else:
                sink = self.pulseInfo.getSink(sinkName)
            argIndex += 1
        return sink
         
    def doChange(self, sinkInput, sink):
        if (not (sinkInput == Null)) and (not (sink == Null)):
            subprocess.Popen([Pacmd, 
                              PacmdMoveSinkInput, 
                              sinkInput.idnum,
                              sink.idnum]).wait()
        else:
            print "Unknown sink or sink input."

########################################################

class SinkToggler(Actioneer):
    Command = "toggle-sink"
    Options = "sink_input sink_name1 sink_name2"
    Does = "Toggles sink_input (generally an app name, e.g. mpd) between two outputs."
    SinkInputIndex = 2
    SinkFirstIndex = 3
    SinkSecondIndex = 4

    def go(self):
        if len(self.argv) < 5:
            self.doMenu()
        else:
            self.doCommandLine()

    def doMenu(self):
        sinkInput = self.askSinkInput()
        sink1 = self.askSink()
        sink2 = self.askSink()
        self.doChange(sinkInput, sink1, sink2)

    def doCommandLine(self):
        sinkInput = self.pulseInfo.getSinkInput(self.argv[self.SinkInputIndex])
        sink1 = self.pulseInfo.getSink(self.argv[self.SinkFirstIndex])
        sink2 = self.pulseInfo.getSink(self.argv[self.SinkSecondIndex])
        self.doChange(sinkInput, sink1, sink2)

    def doChange(self, sinkInput, sink1, sink2):
        if ((not (sinkInput == Null)) and 
            (not (sink1 == Null)) and
            (not (sink2 == Null))):
            if not (sinkInput.sink == sink1.idnum):
                subprocess.Popen([Pacmd, 
                                  PacmdMoveSinkInput, 
                                  sinkInput.idnum,
                                  sink1.idnum]).wait()
            else:
                subprocess.Popen([Pacmd, 
                                  PacmdMoveSinkInput, 
                                  sinkInput.idnum,
                                  sink2.idnum]).wait()
        else:
            print "Unknown sink or sink input."


########################################################

class ListAdjuster(Actioneer):
    Options = "name1 name2 ..."
    Does = "specify the adjust action on the names"

    ListStartIndex = 2

    def go(self):
        if self.ListStartIndex >= len(self.argv):
            self.doMenu()
        else:
            self.doCommandLine()

    def doMenu(self):
        item = self.doAsk()
        self.doItemSling(item)

    def doCommandLine(self):
        index = self.ListStartIndex
        while (index < len(self.argv)):
            name = self.argv[index]
            if (name == ItemsAll):
                self.doAll()
            else:
                self.doOne(name)
            index += 1

    def doAll(self):
        items = self.getItems()
        for item in items:
            self.doItemSling(item)

    def doOne(self, name):
        item = self.getItem(name)
        self.doItemSling(item)

    def doItemSling(self, item):
        if not (item == Null):
            self.doItem(item)
        else:
            print "Item not found."

    def doAsk(self):
        print "specify how to ask for an item"

    def getItem(self):
        print "specify how to get an item"

    def getItems(self):
        print "specify how to get all items"

    def doItem(self, sink):
        print "specify what to do with the sink"


########################################################

class SinkAdjuster(ListAdjuster):
    Options = "sink_name1 sink_name2 ..."
    Does = "specify the sink adjust action on the sink_names"

    def doAsk(self):
        return self.askSink()

    def getItem(self, identifier):
        return self.pulseInfo.getSink(identifier)

    def getItems(self):
        return self.pulseInfo.getSinks()

    def doItem(self):
        print "specify what to do with the sink"

########################################################

class SinkInputAdjuster(ListAdjuster):
    Options = "sink_input_name1 sink_input_name2 ..."
    Does = "specify the sink input adjust action on the sink_input_names"

    def doAsk(self):
        return self.askSinkInput()

    def getItem(self, identifier):
        return self.pulseInfo.getSinkInput(identifier)

    def getItems(self):
        return self.pulseInfo.getSinkInputs()

    def doItem(self):
        print "specify what to do with the sink inputs"


########################################################

# designed as a doItem implementer for SinkAdjuster or SinkInputAdjuster
class MuteToggler:
    PacmdSetMuteCommand = "specify the mute toggle command"    

    def doItem(self, sink):
        if not (sink == Null): 
            mute = "yes"
            if sink.muted:
                mute = "no"
            subprocess.Popen([Pacmd, self.PacmdSetMuteCommand, sink.idnum, mute]).wait()

########################################################

class SinkToggleMute(MuteToggler, SinkAdjuster):
    Command = "toggle-mute"
    Does = "Toggles mute on sink_names if found."
    PacmdSetMuteCommand = PacmdSetSinkMute

########################################################

class SinkInputToggleMute(MuteToggler, SinkInputAdjuster):
    Command = "input-toggle-mute"
    Does = "Toggles mute on sink_input_names if found."
    PacmdSetMuteCommand = PacmdSetSinkInputMute

########################################################

# designed as a doItem implementer for SinkAdjuster or SinkInputAdjuster
class VolumeAdjuster:
    PCChange = 0
    PacmdSetCommand = "specify volume set command"

    def doItem(self, sink):
        volume = int(sink.volume) + self.PCChange
        absVol = str(volume * VolNormal / 100)
        subprocess.Popen([Pacmd, self.PacmdSetCommand, sink.idnum, absVol]).wait()
            

########################################################

class SinkVolumeUp(VolumeAdjuster, SinkAdjuster):
    Command = "volume-up"
    Does = "Increases volume on sink_names by 5%."
    PCChange = 5
    PacmdSetCommand = PacmdSetSinkVolume

########################################################

class SinkInputVolumeUp(VolumeAdjuster, SinkInputAdjuster):
    Command = "input-volume-up"
    Does = "Increases volume on sink_input_names by 5%."
    PCChange = 5
    PacmdSetCommand = PacmdSetSinkInputVolume

########################################################

class SinkVolumeDown(VolumeAdjuster, SinkAdjuster):
    Command = "volume-down"
    Does = "Decreases volume on sink_names by 5%."
    PCChange = -5
    PacmdSetCommand = PacmdSetSinkVolume


########################################################

class SinkInputVolumeDown(VolumeAdjuster, SinkInputAdjuster):
    Command = "input-volume-down"
    Does = "Decreases volume on sink_input_names by 5%."
    PCChange = -5
    PacmdSetCommand = PacmdSetSinkInputVolume

########################################################

# designed as a doItem implementer for SinkAdjuster or SinkInputAdjuster
class AbsVolumeAdjuster:
    PacmdSetCommand = "specify volume set command"

    VolumePCIndex = 2
    DefaultVolume = 50
    # ListStart is different...
    ListStartIndex = 3

    def doItem(self, sink):
        volume = self.getVolume()
        absVol = str(volume * VolNormal / 100)
        subprocess.Popen([Pacmd, self.PacmdSetCommand, sink.idnum, absVol]).wait()

    def getVolume(self):
        volume = ""
        if (len(self.argv) <= self.VolumePCIndex):
            volume = int(raw_input("Volume: "))
        else:
            volume = self.argv[self.VolumePCIndex]
        intVol = 0
        try:
            intVol = int(volume)
        except ValueError:
            print "Error reading volume percent, defaulting to", self.DefaultVolume
            intVol = self.DefaultVolume
        return intVol


            


########################################################

class AbsSinkVolume(AbsVolumeAdjuster, SinkAdjuster):
    Command = "set-volume"
    Options = "percent sink_name1 sink_name2 ..."
    Does = "Sets sink volume on sink_names by to given percent."
    PacmdSetCommand = PacmdSetSinkVolume

########################################################

class AbsSinkInputVolume(AbsVolumeAdjuster, SinkInputAdjuster):
    Command = "set-input-volume"
    Options = "percent sink_input_name1 sink_input_name2 ..."
    Does = "Sets volume on sink_input_names to given percent."
    PacmdSetCommand = PacmdSetSinkInputVolume


########################################################

class Lister(Actioneer):
    Command = "list"
    Options = ""
    Does = "Lists available sinks and sink inputs with info."

    def go(self):
        print "Sinks:\n"
        self.printSinks()
        print "\nSink Inputs:\n"
        self.printSinkInputs()

########################################################

class HasSink(Actioneer):
    Command = "has-sink"
    Options = "sink_name"
    Does = "Prints 'yes' if the given sink exists"

    SinkNameIndex = 2

    def go(self):
        if self.SinkNameIndex >= len(self.argv):
            print "Please specify a sink_name (see help)"
        else:
            sinkArg = self.argv[self.SinkNameIndex]
            sink = self.pulseInfo.getSink(sinkArg)
            if not (sink == Null):
                print "yes"
            else:
                print "no"

########################################################

class HasSinkInput(Actioneer):
    Command = "has-sink-input"
    Options = "sink_input_name"
    Does = "Prints 'yes' if the given sink input exists"

    SinkInputNameIndex = 2

    def go(self):
        if self.SinkInputNameIndex >= len(self.argv):
            print "Please specify a sink_name (see help)"
        else:
            sinkInputArg = self.argv[self.SinkInputNameIndex]
            sinkInput = self.pulseInfo.getSinkInput(sinkInputArg)
            if not (sinkInput == Null):
                print "yes"
            else:
                print "no"

########################################################

class SinkInputSinker(Actioneer):
    Command = "get-sink"
    Options = "sink_input"
    Does = "Prints name of sink associated to sink_input"
    SinkInputIndex = 2

    def go(self):
        if len(self.argv) <= self.SinkInputIndex:
            self.doMenu()
        else:
            self.doCommandLine()

    def doMenu(self):
        sinkInput = self.askSinkInput()
        self.doInfo(sinkInput)

    def doCommandLine(self):
        sinkInput = self.getSinkInput()
        self.doInfo(sinkInput)

    def getSinkInput(self):
        sinkInputName = self.argv[self.SinkInputIndex]
        return self.pulseInfo.getSinkInput(sinkInputName)

    def doInfo(self, sinkInput):
        if (not (sinkInput == Null)):
            sink = self.pulseInfo.getSink(sinkInput.sink)
            print sink.name
        else:
            print "Unknown sink or sink input."


########################################################

ActioneerList = [SinkChanger, 
                 SinkToggler,
                 SinkToggleMute, 
                 SinkVolumeUp, 
                 SinkVolumeDown, 
                 SinkInputToggleMute, 
                 SinkInputVolumeUp, 
                 SinkInputVolumeDown, 
                 Lister,
                 HasSink,
                 HasSinkInput,
                 AbsSinkVolume,
                 AbsSinkInputVolume,
                 SinkInputSinker]

########################################################

class CommandDispatcher:
    def __init__(self, pulseInfo, argv):
        self.argv = argv
        self.pulseInfo = pulseInfo
        self.actioneers = []
        for actioneer in ActioneerList:
            self.actioneers.append(actioneer(pulseInfo, argv))

    def go(self):
        arg_len = len(self.argv)
        done = 0
        if (arg_len >= 2):
            command = self.argv[1]
            if not (command == "help"):
                for actioneer in self.actioneers:
                    if command == actioneer.Command:
                        actioneer.go()
                        done = 1
                if (not done):
                    print "Command", command, "not recognised."
        if (not done):
            self.doHelp()

                
    def doHelp(self):
        print "Usage: pulse-ctrl command options"
        print "Note: special names are", ItemsAll, "and", SinkDefaultName, "(sink).  Names can also be id numbers"
        for actioneer in self.actioneers:
            print 
            print "Command:", actioneer.Command
            print "Options:", actioneer.Options
            print "Does:", actioneer.Does

    

########################################################

pulseInfo = PulseInfo() 
dispatcher = CommandDispatcher(pulseInfo, sys.argv)
dispatcher.go()

